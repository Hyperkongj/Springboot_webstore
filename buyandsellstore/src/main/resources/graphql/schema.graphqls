type AddressOutput {
    type: String!
    street: String!
    city: String!
    state: String!
    zip: Int!
    country: String!
}

input Address {
    type: String
    street: String
    city: String
    state: String
    zip: Int
    country: String
}

type Order {
    id: ID!
    userId: ID!
    items: [CartItem!]!
    totalPrice: Float!
    createdAt: String!
}

input PaymentInput {
    cardNumber: String!
    expiry: String!
    cvv: String!
}

input CartItemInput {
    itemId: ID!
    type: String # E.g., "book", "home", etc.
    name: String
    quantity: Int!
    price: Float!
    imageUrl: String!
}

type Query {
    # A simple query to return a greeting message
    hello: String
    cartItems(id: ID!): [CartItem]
    # Fetch a single book by its ID
    book(id: ID!): Book
    books: [Book!]!
    getOrdersByUserId(userId: ID!): [Order]
}

type User {
    id: ID!
    username: String!
    email: String!
    firstName: String
    lastName: String
    isSeller: Boolean
    phone: String!
    billing: [AddressOutput]
    shipping: [AddressOutput]
}

type Mutation {
    # Mutation to handle user login
    login(username: String!, password: String!): AuthResponse

    # Mutation to handle user signup
    signup(
        username: String!
        email: String!
        password: String!
        firstName: String!
        lastName: String!
        phone: String!
        isSeller: Boolean!
        billing: [Address]
        shipping: [Address]
    ): AuthResponse

    addToCart(userId: ID!, itemId: ID!, type: String!): ResponseMessage!
    # Mutation to remove an item from the cart
    removeFromCart(userId: ID!, itemId: ID, type: String): ResponseMessage!
    createOrder(
        userId: ID!
        items: [CartItemInput!]!
        totalPrice: Float!
        billing: Address
        shipping: Address
        payment: PaymentInput!
    ): OrderResponse!
}

# Response object for authentication-related mutations
type AuthResponse {
    success: Boolean!
    message: String!
    user: User
}

# For Forgot Password
extend type Mutation {
  forgotPassword(email: String!): String
}
# For Reset Password
extend type Mutation {
  resetPassword(token: String!, newPassword: String!): ResetPasswordResponse!
}

type ResetPasswordResponse {
  success: Boolean!
  message: String
}

# Book type definition
type Book {
    id: ID! # Unique identifier for the book
    title: String!
    author: String!
    price: Float!
    imageUrl: String!
    description: String
    ratings: Float!
    reviews: [Review!] # Now Review is defined
}

type CartItem {
    itemId: ID!
    type: String # E.g., "book", "home", etc.
    name: String
    quantity: Int
    price: Float
    imageUrl: String
}

type Review {
    reviewer: String!
    comment: String!
    rating: Float!
}

type ResponseMessage {
    success: Boolean!
    message: String!
}

type OrderResponse {
    success: Boolean!
    message: String!
    order: Order
}